from typing import Any

weather_copyright: str
weather_version: str
radian_to_km: float
radian_to_mi: float

def pyversion(ref: Any | None = ...): ...

class Selections:
    config: Any
    def __init__(self) -> None: ...
    def get(self, option: str, argument: Any | None = ...) -> str: ...
    def get_bool(self, option: str, argument: Any | None = ...) -> bool: ...
    def getint(self, option: str, argument: Any | None = ...) -> int: ...

def average(coords): ...
def filter_units(line, units: str = ...): ...
def get_uri(uri, ignore_fail: bool = ..., cache_data: bool = ..., cacheage: int = ..., cachedir: str = ...): ...
def get_metar(uri: Any | None = ..., verbose: bool = ..., quiet: bool = ..., headers: Any | None = ..., imperial: bool = ..., metric: bool = ..., cache_data: bool = ..., cacheage: int = ..., cachedir: str = ...) -> str: ...
def get_alert(uri: Any | None = ..., verbose: bool = ..., quiet: bool = ..., cache_data: bool = ..., cacheage: int = ..., cachedir: str = ...): ...
def get_options(config): ...
def get_config(): ...
def integrate_search_cache(config, cachedir, setpath): ...
def list_aliases(config, detail: bool = ...): ...
def data_index(path): ...
def guess(expression, path: str = ..., max_results: int = ..., info: bool = ..., cache_search: bool = ..., cacheage: int = ..., cachedir: str = ..., quiet: bool = ...): ...
def closest(position, nodes, fieldname, angle: Any | None = ...): ...
def gecos(formatted): ...
def correlate() -> None: ...
