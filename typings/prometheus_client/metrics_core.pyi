"""
This type stub file was generated by pyright.
"""

METRIC_TYPES = ...
METRIC_NAME_RE = ...
METRIC_LABEL_NAME_RE = ...
RESERVED_METRIC_LABEL_NAME_RE = ...
class Metric:
    """A single metric family and its samples.

    This is intended only for internal use by the instrumentation client.

    Custom collectors should use GaugeMetricFamily, CounterMetricFamily
    and SummaryMetricFamily instead.
    """
    def __init__(self, name, documentation, typ, unit=...) -> None:
        ...
    
    def add_sample(self, name, labels, value, timestamp=..., exemplar=...): # -> None:
        """Add a sample to the metric.

        Internal-only, do not use."""
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __repr__(self): # -> str:
        ...
    


class UnknownMetricFamily(Metric):
    """A single unknown metric and its samples.
    For use by custom collectors.
    """
    def __init__(self, name, documentation, value=..., labels=..., unit=...) -> None:
        ...
    
    def add_metric(self, labels, value, timestamp=...): # -> None:
        """Add a metric to the metric family.
        Args:
        labels: A list of label values
        value: The value of the metric.
        """
        ...
    


UntypedMetricFamily = UnknownMetricFamily
class CounterMetricFamily(Metric):
    """A single counter and its samples.

    For use by custom collectors.
    """
    def __init__(self, name, documentation, value=..., labels=..., created=..., unit=...) -> None:
        ...
    
    def add_metric(self, labels, value, created=..., timestamp=...): # -> None:
        """Add a metric to the metric family.

        Args:
          labels: A list of label values
          value: The value of the metric
          created: Optional unix timestamp the child was created at.
        """
        ...
    


class GaugeMetricFamily(Metric):
    """A single gauge and its samples.

    For use by custom collectors.
    """
    def __init__(self, name, documentation, value=..., labels=..., unit=...) -> None:
        ...
    
    def add_metric(self, labels, value, timestamp=...): # -> None:
        """Add a metric to the metric family.

        Args:
          labels: A list of label values
          value: A float
        """
        ...
    


class SummaryMetricFamily(Metric):
    """A single summary and its samples.

    For use by custom collectors.
    """
    def __init__(self, name, documentation, count_value=..., sum_value=..., labels=..., unit=...) -> None:
        ...
    
    def add_metric(self, labels, count_value, sum_value, timestamp=...): # -> None:
        """Add a metric to the metric family.

        Args:
          labels: A list of label values
          count_value: The count value of the metric.
          sum_value: The sum value of the metric.
        """
        ...
    


class HistogramMetricFamily(Metric):
    """A single histogram and its samples.

    For use by custom collectors.
    """
    def __init__(self, name, documentation, buckets=..., sum_value=..., labels=..., unit=...) -> None:
        ...
    
    def add_metric(self, labels, buckets, sum_value, timestamp=...): # -> None:
        """Add a metric to the metric family.

        Args:
          labels: A list of label values
          buckets: A list of lists.
              Each inner list can be a pair of bucket name and value,
              or a triple of bucket name, value, and exemplar.
              The buckets must be sorted, and +Inf present.
          sum_value: The sum value of the metric.
        """
        ...
    


class GaugeHistogramMetricFamily(Metric):
    """A single gauge histogram and its samples.

    For use by custom collectors.
    """
    def __init__(self, name, documentation, buckets=..., gsum_value=..., labels=..., unit=...) -> None:
        ...
    
    def add_metric(self, labels, buckets, gsum_value, timestamp=...): # -> None:
        """Add a metric to the metric family.

        Args:
          labels: A list of label values
          buckets: A list of pairs of bucket names and values.
              The buckets must be sorted, and +Inf present.
          gsum_value: The sum value of the metric.
        """
        ...
    


class InfoMetricFamily(Metric):
    """A single info and its samples.

    For use by custom collectors.
    """
    def __init__(self, name, documentation, value=..., labels=...) -> None:
        ...
    
    def add_metric(self, labels, value, timestamp=...): # -> None:
        """Add a metric to the metric family.

        Args:
          labels: A list of label values
          value: A dict of labels
        """
        ...
    


class StateSetMetricFamily(Metric):
    """A single stateset and its samples.

    For use by custom collectors.
    """
    def __init__(self, name, documentation, value=..., labels=...) -> None:
        ...
    
    def add_metric(self, labels, value, timestamp=...): # -> None:
        """Add a metric to the metric family.

        Args:
          labels: A list of label values
          value: A dict of string state names to booleans
        """
        ...
    


