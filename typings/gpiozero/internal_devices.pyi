"""
This type stub file was generated by pyright.
"""

from .devices import Device
from .mixins import EventsMixin

str = ...
class InternalDevice(EventsMixin, Device):
    """
    Extends :class:`Device` to provide a basis for devices which have no
    specific hardware representation. These are effectively pseudo-devices and
    usually represent operating system services like the internal clock, file
    systems or network facilities.
    """
    ...


class PingServer(InternalDevice):
    """
    Extends :class:`InternalDevice` to provide a device which is active when a
    *host* on the network can be pinged.

    The following example lights an LED while a server is reachable (note the
    use of :attr:`~SourceMixin.source_delay` to ensure the server is not
    flooded with pings)::

        from gpiozero import PingServer, LED
        from signal import pause

        google = PingServer('google.com')
        led = LED(4)

        led.source_delay = 60  # check once per minute
        led.source = google

        pause()

    :param str host:
        The hostname or IP address to attempt to ping.

    :type pin_factory: Factory or None
    :param pin_factory:
        See :doc:`api_pins` for more information (this is an advanced feature
        which most users can ignore).
    """
    def __init__(self, host, pin_factory=...) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    @property
    def host(self): # -> Unknown:
        """
        The hostname or IP address to test whenever :attr:`value` is queried.
        """
        ...
    
    @property
    def value(self): # -> bool:
        """
        Returns :data:`True` if the host returned a single ping, and
        :data:`False` otherwise.
        """
        ...
    


class CPUTemperature(InternalDevice):
    """
    Extends :class:`InternalDevice` to provide a device which is active when
    the CPU temperature exceeds the *threshold* value.

    The following example plots the CPU's temperature on an LED bar graph::

        from gpiozero import LEDBarGraph, CPUTemperature
        from signal import pause

        # Use minimums and maximums that are closer to "normal" usage so the
        # bar graph is a bit more "lively"
        cpu = CPUTemperature(min_temp=50, max_temp=90)

        print('Initial temperature: {}C'.format(cpu.temperature))

        graph = LEDBarGraph(5, 6, 13, 19, 25, pwm=True)
        graph.source = cpu

        pause()

    :param str sensor_file:
        The file from which to read the temperature. This defaults to the
        sysfs file :file:`/sys/class/thermal/thermal_zone0/temp`. Whatever
        file is specified is expected to contain a single line containing the
        temperature in milli-degrees celsius.

    :param float min_temp:
        The temperature at which :attr:`value` will read 0.0. This defaults to
        0.0.

    :param float max_temp:
        The temperature at which :attr:`value` will read 1.0. This defaults to
        100.0.

    :param float threshold:
        The temperature above which the device will be considered "active".
        (see :attr:`is_active`). This defaults to 80.0.

    :type pin_factory: Factory or None
    :param pin_factory:
        See :doc:`api_pins` for more information (this is an advanced feature
        which most users can ignore).
    """
    def __init__(self, sensor_file=..., min_temp=..., max_temp=..., threshold=..., pin_factory=...) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    @property
    def temperature(self): # -> float:
        """
        Returns the current CPU temperature in degrees celsius.
        """
        ...
    
    @property
    def value(self):
        """
        Returns the current CPU temperature as a value between 0.0
        (representing the *min_temp* value) and 1.0 (representing the
        *max_temp* value). These default to 0.0 and 100.0 respectively, hence
        :attr:`value` is :attr:`temperature` divided by 100 by default.
        """
        ...
    
    @property
    def is_active(self): # -> bool:
        """
        Returns :data:`True` when the CPU :attr:`temperature` exceeds the
        *threshold*.
        """
        ...
    


class LoadAverage(InternalDevice):
    """
    Extends :class:`InternalDevice` to provide a device which is active when
    the CPU load average exceeds the *threshold* value.

    The following example plots the load average on an LED bar graph::

        from gpiozero import LEDBarGraph, LoadAverage
        from signal import pause

        la = LoadAverage(min_load_average=0, max_load_average=2)
        graph = LEDBarGraph(5, 6, 13, 19, 25, pwm=True)

        graph.source = la

        pause()

    :param str load_average_file:
        The file from which to read the load average. This defaults to the
        proc file :file:`/proc/loadavg`. Whatever file is specified is expected
        to contain three space-separated load averages at the beginning of the
        file, representing 1 minute, 5 minute and 15 minute averages
        respectively.

    :param float min_load_average:
        The load average at which :attr:`value` will read 0.0. This defaults to
        0.0.

    :param float max_load_average:
        The load average at which :attr:`value` will read 1.0. This defaults to
        1.0.

    :param float threshold:
        The load average above which the device will be considered "active".
        (see :attr:`is_active`). This defaults to 0.8.

    :param int minutes:
        The number of minutes over which to average the load. Must be 1, 5 or
        15. This defaults to 5.

    :type pin_factory: Factory or None
    :param pin_factory:
        See :doc:`api_pins` for more information (this is an advanced feature
        which most users can ignore).
    """
    def __init__(self, load_average_file=..., min_load_average=..., max_load_average=..., threshold=..., minutes=..., pin_factory=...) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    @property
    def load_average(self): # -> float:
        """
        Returns the current load average.
        """
        ...
    
    @property
    def value(self):
        """
        Returns the current load average as a value between 0.0 (representing
        the *min_load_average* value) and 1.0 (representing the
        *max_load_average* value). These default to 0.0 and 1.0 respectively.
        """
        ...
    
    @property
    def is_active(self): # -> bool:
        """
        Returns :data:`True` when the :attr:`load_average` exceeds the
        *threshold*.
        """
        ...
    


class TimeOfDay(InternalDevice):
    """
    Extends :class:`InternalDevice` to provide a device which is active when
    the computer's clock indicates that the current time is between
    *start_time* and *end_time* (inclusive) which are :class:`~datetime.time`
    instances.

    The following example turns on a lamp attached to an :class:`Energenie`
    plug between 7 and 8 AM::

        from gpiozero import TimeOfDay, Energenie
        from datetime import time
        from signal import pause

        lamp = Energenie(1)
        morning = TimeOfDay(time(7), time(8))

        lamp.source = morning

        pause()

    Note that *start_time* may be greater than *end_time*, indicating a time
    period which crosses midnight.

    :param ~datetime.time start_time:
        The time from which the device will be considered active.

    :param ~datetime.time end_time:
        The time after which the device will be considered inactive.

    :param bool utc:
        If :data:`True` (the default), a naive UTC time will be used for the
        comparison rather than a local time-zone reading.

    :type pin_factory: Factory or None
    :param pin_factory:
        See :doc:`api_pins` for more information (this is an advanced feature
        which most users can ignore).
    """
    def __init__(self, start_time, end_time, utc=..., pin_factory=...) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    @property
    def start_time(self): # -> _time | None:
        """
        The time of day after which the device will be considered active.
        """
        ...
    
    @property
    def end_time(self): # -> _time | None:
        """
        The time of day after which the device will be considered inactive.
        """
        ...
    
    @property
    def utc(self): # -> bool | Unknown:
        """
        If :data:`True`, use a naive UTC time reading for comparison instead of
        a local timezone reading.
        """
        ...
    
    @property
    def value(self): # -> bool:
        """
        Returns :data:`True` when the system clock reads between
        :attr:`start_time` and :attr:`end_time`, and :data:`False` otherwise.
        If :attr:`start_time` is greater than :attr:`end_time` (indicating a
        period that crosses midnight), then this returns :data:`True` when the
        current time is greater than :attr:`start_time` or less than
        :attr:`end_time`.
        """
        ...
    


class DiskUsage(InternalDevice):
    """
    Extends :class:`InternalDevice` to provide a device which is active when
    the disk space used exceeds the *threshold* value.

    The following example plots the disk usage on an LED bar graph::

        from gpiozero import LEDBarGraph, DiskUsage
        from signal import pause

        disk = DiskUsage()

        print('Current disk usage: {}%'.format(disk.usage))

        graph = LEDBarGraph(5, 6, 13, 19, 25, pwm=True)
        graph.source = disk

        pause()

    :param str filesystem:
        A path within the filesystem for which the disk usage needs to be
        computed. This defaults to :file:`/`, which is the root filesystem.

    :param float threshold:
        The disk usage percentage above which the device will be considered
        "active" (see :attr:`is_active`). This defaults to 90.0.

    :type pin_factory: Factory or None
    :param pin_factory:
        See :doc:`api_pins` for more information (this is an advanced feature
        which most users can ignore).
    """
    def __init__(self, filesystem=..., threshold=..., pin_factory=...) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    @property
    def usage(self): # -> float:
        """
        Returns the current disk usage in percentage.
        """
        ...
    
    @property
    def value(self): # -> float:
        """
        Returns the current disk usage as a value between 0.0 and 1.0 by
        dividing :attr:`usage` by 100.
        """
        ...
    
    @property
    def is_active(self): # -> bool:
        """
        Returns :data:`True` when the disk :attr:`usage` exceeds the
        *threshold*.
        """
        ...
    


