"""
This type stub file was generated by pyright.
"""

from collections import namedtuple

str = ...
V1_8 = ...
V3_3 = ...
V5 = ...
GND = ...
NC = ...
GPIO0 = ...
GPIO1 = ...
GPIO2 = ...
GPIO3 = ...
GPIO4 = ...
GPIO5 = ...
GPIO6 = ...
GPIO7 = ...
GPIO8 = ...
GPIO9 = ...
GPIO10 = ...
GPIO11 = ...
GPIO12 = ...
GPIO13 = ...
GPIO14 = ...
GPIO15 = ...
GPIO16 = ...
GPIO17 = ...
GPIO18 = ...
GPIO19 = ...
GPIO20 = ...
GPIO21 = ...
GPIO22 = ...
GPIO23 = ...
GPIO24 = ...
GPIO25 = ...
GPIO26 = ...
GPIO27 = ...
GPIO28 = ...
GPIO29 = ...
GPIO30 = ...
GPIO31 = ...
GPIO32 = ...
GPIO33 = ...
GPIO34 = ...
GPIO35 = ...
GPIO36 = ...
GPIO37 = ...
GPIO38 = ...
GPIO39 = ...
GPIO40 = ...
GPIO41 = ...
GPIO42 = ...
GPIO43 = ...
GPIO44 = ...
GPIO45 = ...
REV1_BOARD = ...
REV2_BOARD = ...
A_BOARD = ...
BPLUS_BOARD = ...
B3PLUS_BOARD = ...
B4_BOARD = ...
APLUS_BOARD = ...
A3PLUS_BOARD = ...
ZERO12_BOARD = ...
ZERO13_BOARD = ...
CM_BOARD = ...
REV1_P1 = ...
REV2_P1 = ...
REV2_P5 = ...
PLUS_J8 = ...
CM_SODIMM = ...
CM3_SODIMM = ...
PI_REVISIONS = ...
class Style:
    def __init__(self, color=...) -> None:
        ...
    
    @classmethod
    def from_style_content(cls, format_spec):
        ...
    
    def __call__(self, format_spec):
        ...
    
    def __format__(self, format_spec): # -> Literal['color', 'mono']:
        ...
    


class PinInfo(namedtuple('PinInfo', ('number', 'function', 'pull_up', 'row', 'col'))):
    """
    This class is a :func:`~collections.namedtuple` derivative used to
    represent information about a pin present on a GPIO header. The following
    attributes are defined:

    .. attribute:: number

        An integer containing the physical pin number on the header (starting
        from 1 in accordance with convention).

    .. attribute:: function

        A string describing the function of the pin. Some common examples
        include "GND" (for pins connecting to ground), "3V3" (for pins which
        output 3.3 volts), "GPIO9" (for GPIO9 in the Broadcom numbering
        scheme), etc.

    .. attribute:: pull_up

        A bool indicating whether the pin has a physical pull-up resistor
        permanently attached (this is usually :data:`False` but GPIO2 and GPIO3
        are *usually* :data:`True`). This is used internally by gpiozero to
        raise errors when pull-down is requested on a pin with a physical
        pull-up resistor.

    .. attribute:: row

        An integer indicating on which row the pin is physically located in
        the header (1-based)

    .. attribute:: col

        An integer indicating in which column the pin is physically located
        in the header (1-based)
    """
    __slots__ = ...


class HeaderInfo(namedtuple('HeaderInfo', ('name', 'rows', 'columns', 'pins'))):
    """
    This class is a :func:`~collections.namedtuple` derivative used to
    represent information about a pin header on a board. The object can be used
    in a format string with various custom specifications::

        from gpiozero import *

        print('{0}'.format(pi_info().headers['J8']))
        print('{0:full}'.format(pi_info().headers['J8']))
        print('{0:col2}'.format(pi_info().headers['P1']))
        print('{0:row1}'.format(pi_info().headers['P1']))

    "color" and "mono" can be prefixed to format specifications to force the
    use of `ANSI color codes`_. If neither is specified, ANSI codes will only
    be used if stdout is detected to be a tty::

        print('{0:color row2}'.format(pi_info().headers['J8'])) # force use of ANSI codes
        print('{0:mono row2}'.format(pi_info().headers['P1'])) # force plain ASCII

    The following attributes are defined:

    .. automethod:: pprint

    .. attribute:: name

        The name of the header, typically as it appears silk-screened on the
        board (e.g. "P1" or "J8").

    .. attribute:: rows

        The number of rows on the header.

    .. attribute:: columns

        The number of columns on the header.

    .. attribute:: pins

        A dictionary mapping physical pin numbers to :class:`PinInfo` tuples.

    .. _ANSI color codes: https://en.wikipedia.org/wiki/ANSI_escape_code
    """
    __slots__ = ...
    def __format__(self, format_spec): # -> str | None:
        ...
    
    def pprint(self, color=...): # -> None:
        """
        Pretty-print a diagram of the header pins.

        If *color* is :data:`None` (the default, the diagram will include ANSI
        color codes if stdout is a color-capable terminal). Otherwise *color*
        can be set to :data:`True` or :data:`False` to force color or
        monochrome output.
        """
        ...
    


class PiBoardInfo(namedtuple('PiBoardInfo', ('revision', 'model', 'pcb_revision', 'released', 'soc', 'manufacturer', 'memory', 'storage', 'usb', 'ethernet', 'wifi', 'bluetooth', 'csi', 'dsi', 'headers', 'board'))):
    """
    This class is a :func:`~collections.namedtuple` derivative used to
    represent information about a particular model of Raspberry Pi. While it is
    a tuple, it is strongly recommended that you use the following named
    attributes to access the data contained within. The object can be used
    in format strings with various custom format specifications::

        from gpiozero import *

        print('{0}'.format(pi_info()))
        print('{0:full}'.format(pi_info()))
        print('{0:board}'.format(pi_info()))
        print('{0:specs}'.format(pi_info()))
        print('{0:headers}'.format(pi_info()))

    "color" and "mono" can be prefixed to format specifications to force the
    use of `ANSI color codes`_. If neither is specified, ANSI codes will only
    be used if stdout is detected to be a tty::

        print('{0:color board}'.format(pi_info())) # force use of ANSI codes
        print('{0:mono board}'.format(pi_info())) # force plain ASCII

    .. _ANSI color codes: https://en.wikipedia.org/wiki/ANSI_escape_code

    .. automethod:: physical_pin

    .. automethod:: physical_pins

    .. automethod:: pprint

    .. automethod:: pulled_up

    .. automethod:: to_gpio

    .. attribute:: revision

        A string indicating the revision of the Pi. This is unique to each
        revision and can be considered the "key" from which all other
        attributes are derived. However, in itself the string is fairly
        meaningless.

    .. attribute:: model

        A string containing the model of the Pi (for example, "B", "B+", "A+",
        "2B", "CM" (for the Compute Module), or "Zero").

    .. attribute:: pcb_revision

        A string containing the PCB revision number which is silk-screened onto
        the Pi (on some models).

        .. note::

            This is primarily useful to distinguish between the model B
            revision 1.0 and 2.0 (not to be confused with the model 2B) which
            had slightly different pinouts on their 26-pin GPIO headers.

    .. attribute:: released

        A string containing an approximate release date for this revision of
        the Pi (formatted as yyyyQq, e.g. 2012Q1 means the first quarter of
        2012).

    .. attribute:: soc

        A string indicating the SoC (`system on a chip`_) that this revision
        of the Pi is based upon.

    .. attribute:: manufacturer

        A string indicating the name of the manufacturer (usually "Sony" but a
        few others exist).

    .. attribute:: memory

        An integer indicating the amount of memory (in Mb) connected to the
        SoC.

        .. note::

            This can differ substantially from the amount of RAM available
            to the operating system as the GPU's memory is shared with the
            CPU. When the camera module is activated, at least 128Mb of RAM
            is typically reserved for the GPU.

    .. attribute:: storage

        A string indicating the type of bootable storage used with this
        revision of Pi, e.g. "SD", "MicroSD", or "eMMC" (for the Compute
        Module).

    .. attribute:: usb

        An integer indicating how many USB ports are physically present on
        this revision of the Pi.

        .. note::

            This does *not* include the micro-USB port used to power the Pi.

    .. attribute:: ethernet

        An integer indicating how many Ethernet ports are physically present
        on this revision of the Pi.

    .. attribute:: wifi

        A bool indicating whether this revision of the Pi has wifi built-in.

    .. attribute:: bluetooth

        A bool indicating whether this revision of the Pi has bluetooth
        built-in.

    .. attribute:: csi

        An integer indicating the number of CSI (camera) ports available on
        this revision of the Pi.

    .. attribute:: dsi

        An integer indicating the number of DSI (display) ports available on
        this revision of the Pi.

    .. attribute:: headers

        A dictionary which maps header labels to :class:`HeaderInfo` tuples.
        For example, to obtain information about header P1 you would query
        ``headers['P1']``. To obtain information about pin 12 on header J8 you
        would query ``headers['J8'].pins[12]``.

        A rendered version of this data can be obtained by using the
        :class:`PiBoardInfo` object in a format string::

            from gpiozero import *
            print('{0:headers}'.format(pi_info()))

    .. attribute:: board

        An ASCII art rendition of the board, primarily intended for console
        pretty-print usage. A more usefully rendered version of this data can
        be obtained by using the :class:`PiBoardInfo` object in a format
        string. For example::

            from gpiozero import *
            print('{0:board}'.format(pi_info()))

    .. _system on a chip: https://en.wikipedia.org/wiki/System_on_a_chip
    """
    __slots__ = ...
    @classmethod
    def from_revision(cls, revision):
        ...
    
    def physical_pins(self, function): # -> set[tuple[Any, Any]]:
        """
        Return the physical pins supporting the specified *function* as tuples
        of ``(header, pin_number)`` where *header* is a string specifying the
        header containing the *pin_number*. Note that the return value is a
        :class:`set` which is not indexable. Use :func:`physical_pin` if you
        are expecting a single return value.

        :param str function:
            The pin function you wish to search for. Usually this is something
            like "GPIO9" for Broadcom GPIO pin 9, or "GND" for all the pins
            connecting to electrical ground.
        """
        ...
    
    def physical_pin(self, function): # -> tuple[Any, Any]:
        """
        Return the physical pin supporting the specified *function*. If no pins
        support the desired *function*, this function raises :exc:`PinNoPins`.
        If multiple pins support the desired *function*, :exc:`PinMultiplePins`
        will be raised (use :func:`physical_pins` if you expect multiple pins
        in the result, such as for electrical ground).

        :param str function:
            The pin function you wish to search for. Usually this is something
            like "GPIO9" for Broadcom GPIO pin 9.
        """
        ...
    
    def pulled_up(self, function): # -> Any | Literal[False]:
        """
        Returns a bool indicating whether a physical pull-up is attached to
        the pin supporting the specified *function*. Either :exc:`PinNoPins`
        or :exc:`PinMultiplePins` may be raised if the function is not
        associated with a single pin.

        :param str function:
            The pin function you wish to determine pull-up for. Usually this is
            something like "GPIO9" for Broadcom GPIO pin 9.
        """
        ...
    
    def to_gpio(self, spec):
        """
        Parses a pin *spec*, returning the equivalent Broadcom GPIO port number
        or raising a :exc:`ValueError` exception if the spec does not represent
        a GPIO port.

        The *spec* may be given in any of the following forms:

        * An integer, which will be accepted as a GPIO number
        * 'GPIOn' where n is the GPIO number
        * 'WPIn' where n is the `wiringPi`_ pin number
        * 'BCMn' where n is the GPIO number (alias of GPIOn)
        * 'BOARDn' where n is the physical pin number on the main header
        * 'h:n' where h is the header name and n is the physical pin number
          (for example J8:5 is physical pin 5 on header J8, which is the main
          header on modern Raspberry Pis)

        .. _wiringPi: http://wiringpi.com/pins/
        """
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __format__(self, format_spec): # -> str | Any | None:
        ...
    
    def pprint(self, color=...): # -> None:
        """
        Pretty-print a representation of the board along with header diagrams.

        If *color* is :data:`None` (the default), the diagram will include ANSI
        color codes if stdout is a color-capable terminal. Otherwise *color*
        can be set to :data:`True` or :data:`False` to force color or monochrome
        output.
        """
        ...
    


def pi_info(revision=...): # -> Any | Self@PiBoardInfo:
    """
    Returns a :class:`PiBoardInfo` instance containing information about a
    *revision* of the Raspberry Pi.

    :param str revision:
        The revision of the Pi to return information about. If this is omitted
        or :data:`None` (the default), then the library will attempt to determine
        the model of Pi it is running on and return information about that.
    """
    ...

